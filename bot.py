import discord
import json
from discord.ext import commands
from discord.ui import View, Button
from dotenv import load_dotenv
import os


load_dotenv()

TOKEN = os.getenv("DISCORD_TOKEN")

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –Ω—ñ–∫—ñ–≤

DATA_FILE = "nickname_history.json"


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª—É


def load_data():

    try:

        with open(DATA_FILE, "r", encoding="utf-8") as file:

            return json.load(file)

    except FileNotFoundError:

        return {}


def save_data(data):

    with open(DATA_FILE, "w", encoding="utf-8") as file:

        json.dump(data, file, indent=4, ensure_ascii=False)


# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –Ω—ñ–∫—ñ–≤

nickname_data = load_data()


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞

intents = discord.Intents.all()

bot = commands.Bot(command_prefix="!", intents=intents)


# –§—ñ–∫—Å—É—î–º–æ –∑–º—ñ–Ω—É –Ω—ñ–∫—ñ–≤


@bot.event
async def on_member_update(before, after):

    if before.nick != after.nick:

        user_id = str(after.id)

        if user_id not in nickname_data:

            nickname_data[user_id] = {"nickname_changes": []}

        nickname_data[user_id]["nickname_changes"].append(
            {
                "old": before.nick if before.nick else after.name,
                "new": after.nick if after.nick else after.name,
                "date": str(discord.utils.utcnow().date()),
                "likes": 0,
                "liked_by": [],
            }
        )

        save_data(nickname_data)


# –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —ñ—Å—Ç–æ—Ä—ñ—é –Ω—ñ–∫—ñ–≤ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ª–∞–π–∫—ñ–≤


@bot.command()
async def history(ctx, member: discord.Member):

    user_id = str(member.id)

    if user_id not in nickname_data or not nickname_data[user_id]["nickname_changes"]:

        await ctx.send(f"‚ùå {member.mention} —â–µ –Ω–µ –∑–º—ñ–Ω—é–≤–∞–≤ –Ω—ñ–∫.")

        return

    for change in nickname_data[user_id]["nickname_changes"]:

        view = LikeView(user_id, change)  # –ü–µ—Ä–µ–¥–∞—î–º–æ –∑–º—ñ–Ω—É –Ω—ñ–∫—É —É View

        embed = discord.Embed(
            title="üìú –Ü—Å—Ç–æ—Ä—ñ—è –Ω—ñ–∫—ñ–≤",
            description=f"**{change['old']}** ‚Üí **{change['new']}** ({change['date']})",
            color=discord.Color.blue(),
        )

        await ctx.send(embed=embed, view=view)


# –ö–ª–∞—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ª–∞–π–∫—ñ–≤


class LikeView(View):

    def __init__(self, user_id, change):

        super().__init__()

        self.change = change

        self.like_button = Button(
            label=f"üëç {self.change['likes']} –ª–∞–π–∫—ñ–≤",
            style=discord.ButtonStyle.green
        )
        self.add_item(self.like_button)
        self.like_button.callback = self.like_button_callback

    async def like_button_callback(self, interaction: discord.Interaction):

        try:
            change = self.change

            user_liked = str(interaction.user.id)

            # –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ª–∞–π–∫–∞ (–¥–æ–¥–∞—î–º–æ –∞–±–æ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ)

            if user_liked in change["liked_by"]:

                change["liked_by"].remove(user_liked)

                change["likes"] -= 1

                message = (
                    f"‚ùå {interaction.user.mention}, —Ç–∏ –ø—Ä–∏–±—Ä–∞–≤ –ª–∞–π–∫ –∑ {change['new']}."
                )

            else:

                change["liked_by"].append(user_liked)

                change["likes"] += 1

                message = (
                    f"‚úÖ {interaction.user.mention}, —Ç–∏ –ø–æ—Å—Ç–∞–≤–∏–≤ –ª–∞–π–∫ {change['new']}!"
                )

            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É —Ç–∞ –±–∞–∑—É

            self.like_button.label = f"üëç {change['likes']} –ª–∞–π–∫—ñ–≤"

            save_data(nickname_data)

            await interaction.response.edit_message(view=self)

            await interaction.followup.send(message, ephemeral=True)

        except Exception as e:
            await interaction.followup.send(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(f"{TOKEN}")
